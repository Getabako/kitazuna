import React, { useState, useEffect } from 'react';
import styled, { keyframes } from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';

const sparkle = keyframes`
  0%, 100% { transform: scale(0.8) rotate(0deg); opacity: 0.6; }
  50% { transform: scale(1.2) rotate(180deg); opacity: 1; }
`;

const cardFloat = keyframes`
  0%, 100% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
`;

const CardShuffleIn = {
  initial: { rotateY: -90, opacity: 0, scale: 0.8, z: -200 },
  animate: { rotateY: 0, opacity: 1, scale: 1, z: 0 },
  exit: { rotateY: 90, opacity: 0, scale: 0.8, z: -200 }
};

const CharacterContainer = styled.section`
  min-height: 100vh;
  padding: 4rem 2rem;
  background: 
    radial-gradient(ellipse at top, rgba(30, 144, 255, 0.2) 0%, transparent 60%),
    linear-gradient(135deg, #0f1419 0%, #1a1f2e 100%);
  color: white;
  position: relative;
  overflow: hidden;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: 
      radial-gradient(circle at 20% 30%, rgba(30, 144, 255, 0.1) 0%, transparent 25%),
      radial-gradient(circle at 80% 70%, rgba(255, 215, 0, 0.1) 0%, transparent 25%);
    pointer-events: none;
  }
`;

const SectionTitle = styled(motion.h2)`
  font-size: 3rem;
  text-align: center;
  margin-bottom: 3rem;
  background: linear-gradient(45deg, #ff6b6b, #ffd700);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  
  @media (max-width: 768px) {
    font-size: 2rem;
  }
`;

const CardGameContainer = styled.div`
  max-width: 1200px;
  margin: 0 auto;
  position: relative;
  height: 600px;
  display: flex;
  align-items: center;
  justify-content: center;
  perspective: 1500px;
  
  @media (max-width: 768px) {
    height: 500px;
  }
`;

const PokemonCard = styled(motion.div)<{ $position: 'left' | 'center' | 'right' }>`
  position: absolute;
  width: 280px;
  height: 400px;
  background: 
    linear-gradient(145deg, #1e3a8a 0%, #1e40af 50%, #2563eb 100%);
  border-radius: 20px;
  border: 4px solid #ffd700;
  box-shadow: 
    0 20px 40px rgba(0, 0, 0, 0.4),
    inset 0 2px 10px rgba(255, 255, 255, 0.2),
    0 0 20px rgba(255, 215, 0, 0.3);
  cursor: pointer;
  transform-style: preserve-3d;
  overflow: hidden;
  
  ${props => {
    switch (props.$position) {
      case 'left':
        return `
          left: -100px;
          z-index: 1;
          transform: rotateY(25deg) scale(0.85);
          opacity: 0.7;
        `;
      case 'center':
        return `
          left: 50%;
          transform: translateX(-50%) scale(1.1);
          z-index: 3;
          animation: ${cardFloat} 3s ease-in-out infinite;
        `;
      case 'right':
        return `
          right: -100px;
          z-index: 1;
          transform: rotateY(-25deg) scale(0.85);
          opacity: 0.7;
        `;
    }
  }}
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
      radial-gradient(circle at 30% 20%, rgba(255, 255, 255, 0.2) 0%, transparent 30%),
      radial-gradient(circle at 70% 80%, rgba(255, 215, 0, 0.1) 0%, transparent 40%);
    pointer-events: none;
    z-index: 1;
  }
  
  &:hover {
    transform: ${props => props.$position === 'center' ? 'translateX(-50%) scale(1.15)' : 
      props.$position === 'left' ? 'rotateY(15deg) scale(0.9)' : 'rotateY(-15deg) scale(0.9)'};
    box-shadow: 
      0 25px 50px rgba(0, 0, 0, 0.5),
      inset 0 2px 10px rgba(255, 255, 255, 0.3),
      0 0 30px rgba(255, 215, 0, 0.5);
  }
  
  @media (max-width: 768px) {
    width: 220px;
    height: 320px;
    
    ${props => {
      switch (props.$position) {
        case 'left':
          return 'left: -80px; transform: rotateY(30deg) scale(0.8);';
        case 'center':
          return 'transform: translateX(-50%) scale(1);';
        case 'right':
          return 'right: -80px; transform: rotateY(-30deg) scale(0.8);';
      }
    }}
  }
`;

const CardHeader = styled.div`
  height: 80px;
  background: linear-gradient(135deg, #ffd700, #ffed4e);
  padding: 1rem;
  position: relative;
  z-index: 2;
  
  &::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, transparent, #ff6b6b, transparent);
  }
`;

const CardTitle = styled.h3`
  color: #1a1a2e;
  font-size: 1.2rem;
  font-weight: bold;
  text-align: center;
  margin: 0;
  text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.5);
  
  @media (max-width: 768px) {
    font-size: 1rem;
  }
`;

const CardImageArea = styled.div<{ $bgColor: string }>`
  height: 180px;
  background: ${props => props.$bgColor};
  margin: 10px;
  border-radius: 15px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
  border: 2px solid rgba(255, 255, 255, 0.3);
  box-shadow: inset 0 2px 10px rgba(0, 0, 0, 0.2);
  
  @media (max-width: 768px) {
    height: 140px;
    margin: 8px;
  }
`;

const CharacterPortrait = styled.img`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  opacity: 0.8;
  z-index: 1;
  filter: brightness(1.1) contrast(1.1);
`;

const CharacterEmoji = styled.div`
  position: relative;
  z-index: 2;
  font-size: 3.5rem;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
  animation: ${sparkle} 2s ease-in-out infinite;
  
  @media (max-width: 768px) {
    font-size: 2.5rem;
  }
`;

const CardInfo = styled.div`
  padding: 1rem;
  background: rgba(0, 0, 0, 0.2);
  border-radius: 0 0 16px 16px;
  position: relative;
  z-index: 2;
  height: 130px;
  
  @media (max-width: 768px) {
    padding: 0.8rem;
    height: 110px;
  }
`;


const CharacterRole = styled.p`
  color: #ff6b6b;
  font-weight: bold;
  margin-bottom: 0.5rem;
  font-size: 0.8rem;
  text-align: center;
  
  @media (max-width: 768px) {
    font-size: 0.7rem;
  }
`;

const CharacterDescription = styled.p`
  color: #e0e0e0;
  line-height: 1.4;
  font-size: 0.75rem;
  text-align: center;
  margin-bottom: 0.5rem;
  
  @media (max-width: 768px) {
    font-size: 0.7rem;
    line-height: 1.3;
  }
`;

const CharacterTags = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 0.3rem;
  justify-content: center;
  margin-top: 0.5rem;
`;

const Tag = styled.span`
  background: rgba(255, 215, 0, 0.3);
  padding: 0.2rem 0.5rem;
  border-radius: 10px;
  font-size: 0.6rem;
  color: #ffd700;
  border: 1px solid rgba(255, 215, 0, 0.5);
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.8);
  
  @media (max-width: 768px) {
    font-size: 0.55rem;
    padding: 0.15rem 0.4rem;
  }
`;

const CharacterModal = styled(motion.div)`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  padding: 2rem;
`;

const ModalContent = styled(motion.div)`
  background: linear-gradient(135deg, #1a1a2e, #16213e);
  padding: 3rem;
  border-radius: 20px;
  max-width: 900px;
  width: 100%;
  max-height: 80vh;
  overflow-y: auto;
  position: relative;
`;

const CloseButton = styled.button`
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: none;
  border: none;
  color: white;
  font-size: 1.5rem;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 50%;
  transition: background 0.3s ease;
  
  &:hover {
    background: rgba(255, 255, 255, 0.1);
  }
`;

const ModalCharacterImage = styled.div<{ $bgColor: string }>`
  width: 150px;
  height: 150px;
  background: ${props => props.$bgColor};
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 4rem;
  margin: 0 auto 2rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
`;

const DesignerCredit = styled.div`
  text-align: center;
  margin-top: 3rem;
  padding: 2rem;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 15px;
  border: 1px solid rgba(255, 255, 255, 0.1);
`;

const DesignerTitle = styled.h3`
  color: #ffd700;
  margin-bottom: 1rem;
`;

const DesignerDescription = styled.p`
  color: #e0e0e0;
  line-height: 1.6;
`;

interface Character {
  id: number;
  name: string;
  role: string;
  emoji: string;
  bgColor: string;
  description: string;
  detailDescription: string;
  tags: string[];
  abilities?: string[];
  backstory?: string;
  imageRandom: number;
}

const NavigationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 2rem;
  margin-top: 3rem;
`;

const NavButton = styled(motion.button)`
  width: 60px;
  height: 60px;
  border: 3px solid #ffd700;
  border-radius: 50%;
  background: linear-gradient(145deg, #1e40af, #2563eb);
  color: #ffd700;
  font-size: 1.5rem;
  cursor: pointer;
  box-shadow: 
    0 4px 8px rgba(0, 0, 0, 0.3),
    inset 0 2px 4px rgba(255, 255, 255, 0.2);
  transition: all 0.3s ease;
  
  &:hover {
    box-shadow: 
      0 6px 12px rgba(0, 0, 0, 0.4),
      inset 0 2px 4px rgba(255, 255, 255, 0.3);
  }
  
  &:active {
    transform: translateY(2px);
  }
`;

const CardIndicators = styled.div`
  display: flex;
  gap: 0.8rem;
  align-items: center;
`;

const Indicator = styled(motion.div)<{ $isActive: boolean }>`
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: ${props => props.$isActive ? '#ffd700' : 'rgba(255, 215, 0, 0.3)'};
  border: 2px solid #ffd700;
  cursor: pointer;
  transition: all 0.3s ease;
  
  &:hover {
    transform: scale(1.2);
  }
`;

const CharacterSection: React.FC = () => {
  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(null);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isAutoPlay, setIsAutoPlay] = useState(true);


  const characters: Character[] = [
    {
      id: 1,
      name: 'ÊùâÈáéÂÅ•Â§™',
      role: '‰∏ª‰∫∫ÂÖ¨„ÉªÁúü„ÅÆKitazuna',
      emoji: 'üå±',
      bgColor: 'linear-gradient(135deg, #96ceb4, #ffeaa7)',
      description: 'ÂÜÖÂêëÁöÑ„Å™Â§ßÂ≠¶Áîü„Åå„ÄÅÁßãÁî∞„Åß„ÅÆÂá∫‰ºö„ÅÑ„ÇíÈÄö„Åò„Å¶Áúü„ÅÆ„É™„Éº„ÉÄ„Éº„Å∏„Å®ÊàêÈï∑„Åô„ÇãÁâ©Ë™û„ÅÆ‰∏ª‰∫∫ÂÖ¨„ÄÇ',
      detailDescription: 'Á•ñÁà∂„ÉªÊùâÈáéÈõÖÂºò„Åã„Çâ„ÅÆÁ∑äÊÄ•‰æùÈ†º„ÅßÁßãÁî∞„ÇíË®™„Çå„Çã„Åì„Å®„Å´„Å™„Å£„ÅüÂ§ßÂ≠¶Áîü„ÄÇÊúÄÂàù„ÅØÈÄÉ„ÅíËÖ∞„ÅßÊ∂àÊ•µÁöÑ„Å†„Å£„Åü„Åå„ÄÅ„Éä„ÇÆ„Çµ„ÄÅ„Ç≥„Éû„ÉÅ„ÄÅ„Ç§„Éä„Éã„ÉØË¶™Â≠ê„ÄÅ„Çø„ÉÑ„Ç≥„Å®„Éè„ÉÅ„É≠„Ç¶„ÄÅ„Ç¢„Ç≠„Çø„ÄÅ„Éà„É™„Ç™„Å®„Çø„É≥„Éù„Å®„ÅÆÂá∫‰ºö„ÅÑ„ÇíÈÄö„Åò„Å¶ÊàêÈï∑„ÄÇ„ÄåÈ≠Ç„ÅÆÊèêÁÅØ„Äç„ÇíÈõÜ„ÇÅ„ÄÅ„Çπ„ÇÆ„Éé„Ç™„Ç¶„ÇíÊµÑÂåñ„Åó„Å¶„Çπ„ÇÆ„Éé„Ç´„Éü„Å∏„Å®Â∞é„Åè‰ΩøÂëΩ„ÇíÊûú„Åü„Åó„Åæ„Åô„ÄÇ',
      tags: ['ÊàêÈï∑', '„É™„Éº„ÉÄ„Éº„Ç∑„ÉÉ„Éó', 'ÁµÜ'],
      abilities: ['È≠Ç„ÅÆÊÑüÁü•', '‰ª≤Èñì„Å®„ÅÆÈÄ£Êê∫', 'ÂïèÈ°åËß£Ê±∫', 'ÊµÑÂåñ„ÅÆÂäõ'],
      backstory: 'Âπ≥Âá°„Å™Êó•Â∏∏„ÇíÈÄÅ„Å£„Å¶„ÅÑ„Åü„Åå„ÄÅÁ•ñÁà∂„Åã„Çâ„ÅÆ‰æùÈ†º„Åß‰∫∫Áîü„Åå‰∏ÄÂ§â„ÄÇÁßãÁî∞„Åß„ÅÆÊßò„ÄÖ„Å™Âá∫‰ºö„ÅÑ„Å®ÁµåÈ®ì„ÇíÈÄö„Åò„Å¶„ÄÅËá™ÂàÜËá™Ë∫´„ÅÆÁúü„ÅÆ‰ΩøÂëΩ„Å®ÁßãÁî∞„Å∏„ÅÆÊÑõ„ÇíË¶ã„Å§„Åë„Å¶„ÅÑ„ÅèÁâ©Ë™û„Åß„Åô„ÄÇ',
      imageRandom: 35
    },
    {
      id: 2,
      name: '„Éä„ÇÆ„Çµ',
      role: 'Áúü„ÅÆ„Éä„Éû„Éè„Ç≤Á≤æÁ•û„ÅÆÁ∂ôÊâøËÄÖ',
      emoji: 'üëπ',
      bgColor: 'linear-gradient(135deg, #ff6b6b, #ff8e8e)',
      description: 'ÊÄßÂà•„ÅÆÂ£Å„ÇíË∂ä„Åà„Å¶„Éä„Éû„Éè„Ç≤„ÅÆÁúü„ÅÆÁ≤æÁ•û„ÇíÁøíÂæó„ÄÇ‰ºùÁµ±„ÇíÂÆà„Çä„Å™„Åå„Çâ„ÇÇÈù©Êñ∞„Åô„ÇãÂãáÊï¢„Å™Â∞ëÂ•≥„ÄÇ',
      detailDescription: 'Áî∑ÈπøÂçäÂ≥∂Âá∫Ë∫´„Åß„ÄÅÂπº„ÅÑÈ†É„Åã„Çâ„Éä„Éû„Éè„Ç≤„Å´ÊÜß„Çå„ÇíÊåÅ„Å°Á∂ö„Åë„Å¶„ÅÑ„Åæ„Åó„Åü„ÄÇ‰ºùÁµ±ÁöÑ„Å´Áî∑ÊÄß„ÅÆ„Åø„ÅåÊåëÊà¶„Åô„Çã„Å®„Åï„Çå„Å¶„ÅÑ„Åü„Éä„Éû„Éè„Ç≤„ÅÆÈÅì„Å´„ÄÅÊÄßÂà•„ÅÆÂ£Å„Çí‰πó„ÇäË∂ä„Åà„Å¶ÊåëÊà¶„ÄÇÈùí„ÅÑ„Éä„Éû„Éè„Ç≤ÔºàÂÆü„ÅØÂ•≥ÊÄßÔºâ„Åã„ÇâÊ≠£Âºè„Å´„Éä„Éû„Éè„Ç≤Á≤æÁ•û„ÇíË™çÂÆö„Åï„Çå„ÄÅÁúü„ÅÆÁ≤æÁ•ûÁöÑË≥áË≥™„ÅØÂ§ñË¶ã„ÇÑÂ±ûÊÄß„ÇíË∂ÖË∂ä„Åô„Çã„Åì„Å®„ÇíË®ºÊòé„Åó„Åæ„Åó„Åü„ÄÇ',
      tags: ['ÂãáÊï¢', 'Èù©Êñ∞', 'Âπ≥Á≠â'],
      abilities: ['„Éä„Éû„Éè„Ç≤Á≤æÁ•û', 'ÂøÉ„ÅÆÊµÑÂåñ', 'È§Ö‰Ωú„Çä„ÅÆÊäÄ', 'SNSÊ¥ªÁî®'],
      backstory: 'ÊÄßÂà•„Å´„Çà„ÇãÂà∂Á¥Ñ„Å´ÁñëÂïè„ÇíÊåÅ„Å°Á∂ö„Åë„ÄÅÂÅ•Â§™„Å®„ÅÆÂá∫‰ºö„ÅÑ„Çí„Åç„Å£„Åã„Åë„Å´Áúü„ÅÆ„Éä„Éû„Éè„Ç≤„ÅÆÈÅì„ÇíÊ≠©„ÅøÂßã„ÇÅ„Åæ„Åó„Åü„ÄÇÂêåÊôÇ„Å´„Ç≥„Éû„ÉÅ„ÅÆSNSÊ¥ªÂãï„Çí„Çµ„Éù„Éº„Éà„Åó„ÄÅ‰ºùÁµ±„Å®Áèæ‰ª£ÊäÄË°ì„ÅÆÊû∂„ÅëÊ©ã„Å®„Å™„Çä„Åæ„Åô„ÄÇ',
      imageRandom: 30
    },
    {
      id: 3,
      name: '„Ç≥„Éû„ÉÅ',
      role: '‰ºùÁµ±„Å®Áèæ‰ª£„ÇíÁπã„Åê„Ç§„É≥„Éï„É´„Ç®„É≥„Çµ„Éº',
      emoji: 'üå∏',
      bgColor: 'linear-gradient(135deg, #ffd700, #ffed4e)',
      description: 'Â∞èÈáéÂ∞èÁî∫„ÅÆÂåñË∫´„ÄÇÂπ≥ÂÆâÊôÇ‰ª£„Åã„Çâ„ÅÆÁæé„ÅÆÁü•Ë≠ò„ÇíSNS„ÅßÁèæ‰ª£„Å´‰ºù„Åà„ÇãÈù©Êñ∞ÁöÑ„Å™Â≠òÂú®„ÄÇ',
      detailDescription: 'Èï∑„ÅÑÈñìËìÑÁ©ç„Åï„Çå„ÅüÁæé„Å®ÊñáÂåñ„ÅÆÁü•Ë≠ò„ÇíÊåÅ„Å°„Å™„Åå„Çâ„ÄÅÁèæ‰ª£Á§æ‰ºö„Åß„ÅÆÂ±ÖÂ†¥ÊâÄ„ÇíÂ§±„ÅÑÂ≠§Áã¨ÊÑü„ÇíÊä±„Åà„Å¶„ÅÑ„Åæ„Åó„Åü„ÄÇ„Éä„ÇÆ„Çµ„ÅÆÊèêÊ°à„ÅßSNS„ÇíÊ¥ªÁî®„Åó„ÄÅ„ÄåÂπ≥ÂÆâÁæé‰∫∫„Äç„Å®„Åó„Å¶„ÅÆ„Éñ„É©„É≥„Éâ„ÇíÁ¢∫Á´ã„ÄÇÁü≠ÊúüÈñì„Åß1,000‰∫∫„ÅÆ„Éï„Ç©„É≠„ÉØ„Éº„ÇíÁç≤Âæó„Åó„ÄÅ‰ºùÁµ±ÁöÑ‰æ°ÂÄ§„Å®Áèæ‰ª£ÊäÄË°ì„ÅÆÁæé„Åó„ÅÑËûçÂêà„ÇíÂÆüÁèæ„Åó„Åæ„Åó„Åü„ÄÇ',
      tags: ['Áæé', '„Éá„Ç∏„Çø„É´', 'ÊñáÂåñÁ∂ôÊâø'],
      abilities: ['Áæé„ÅÆËøΩÊ±Ç', 'SNSÈÅãÂñ∂', 'È™®Ëë£ÂìÅÈëëÂÆö', '„Éñ„É©„É≥„Éá„Ç£„É≥„Ç∞'],
      backstory: '„Éä„ÇÆ„Çµ„Å®„ÅÆÂá∫‰ºö„ÅÑ„Å´„Çà„Çä‰ºùÁµ±ÁöÑ‰æ°ÂÄ§„ÅÆÁèæ‰ª£ÁöÑË°®ÁèæÊñπÊ≥ï„ÇíÁô∫Ë¶ã„ÄÇÂè§„ÅÑÁü•Ë≠ò„Å®Êñ∞„Åó„ÅÑÊäÄË°ì„ÅÆÁ¥†Êô¥„Çâ„Åó„ÅÑË™øÂíå„ÇíÁ§∫„Åó„ÄÅÂú∞Êñπ„ÅÆÊñáÂåñ„Çí‰∏ñÁïå„Å´Áô∫‰ø°„Åô„ÇãÈÅì„ÇíÈñã„Åç„Åæ„Åó„Åü„ÄÇ',
      imageRandom: 31
    },
    {
      id: 4,
      name: '„Ç§„Éä„Éã„ÉØ & „Ç´„É≥„Éà',
      role: '‰ºùÁµ±„Å®Èù©Êñ∞„ÅÆË¶™Â≠ê',
      emoji: 'üçú',
      bgColor: 'linear-gradient(135deg, #4ecdc4, #45b7d1)',
      description: 'Á®≤Â∫≠„ÅÜ„Å©„ÇìËÅ∑‰∫∫„ÅÆÁà∂„Å®Á´øÁáàÂ£´„ÅÆÊÅØÂ≠ê„ÄÇ‰∏ñ‰ª£Èñì„ÅÆÁêÜËß£„Å®ÊäÄË°ì„ÅÆËûçÂêà„ÅßÊñ∞„Åü„Å™ÈÅì„ÇíÈñã„Åè„ÄÇ',
      detailDescription: 'ÊπØÊ≤¢Â∏Ç„Åß„Äå‰ª§ÂíåËÄïÂä©„Äç„ÇíÁµåÂñ∂„Åô„Çã„Ç§„Éä„Éã„ÉØ„Å®„ÄÅÁ´øÁáàÁ•≠„Çä„Å´ÁÜ±‰∏≠„Åô„ÇãÊÅØÂ≠ê„Ç´„É≥„Éà„ÅÆË¶™Â≠ê„ÄÇÂΩìÂàù„ÅØ‰∫ãÊ•≠ÊâøÁ∂ô„Çí„ÇÅ„Åê„Å£„Å¶ÂØæÁ´ã„Åó„Å¶„ÅÑ„Åæ„Åó„Åü„Åå„ÄÅ„Ç´„É≥„Éà„ÅåÊñ∞ÊäÄ„ÄåË∂≥Á´øÁáà„Äç„Å´ÊåëÊà¶„Åô„Çã‰∏≠„Åß„ÄÅÁà∂„ÅÆÁ®≤Â∫≠„ÅÜ„Å©„Çì„ÅÆÊâã„Å¨„ÅÑÊäÄË°ì„Å®„ÅÆËûçÂêà„Å´„Çà„ÇäÊñ∞„Åü„Å™ÂèØËÉΩÊÄß„ÇíÁô∫Ë¶ã„ÄÇ‰ºùÁµ±„ÅÆÁ∂ôÊâø„Å®Èù©Êñ∞„ÅÆÂâµÈÄ†„Åå‰∏°Á´ã„Åô„ÇãÁæé„Åó„ÅÑÁâ©Ë™û„Åß„Åô„ÄÇ',
      tags: ['‰∫ãÊ•≠ÊâøÁ∂ô', 'ÊäÄË°ìËûçÂêà', 'ÂÆ∂Êóè„ÅÆÁµÜ'],
      abilities: ['Êâã„Å¨„ÅÑÊäÄË°ì', 'Ë∂≥Á´øÁáà', '‰∏ñ‰ª£Ê©ãÊ∏°„Åó', '‰ºùÁµ±Èù©Êñ∞'],
      backstory: 'Áà∂Â≠ê„ÅÆ‰æ°ÂÄ§Ë¶≥„ÅÆÁõ∏ÈÅï„Åã„ÇâÂßã„Åæ„Å£„ÅüÂØæÁ´ã„Åå„ÄÅ‰∫í„ÅÑ„ÅÆÊäÄË°ì„Å∏„ÅÆÊï¨ÊÑè„Å®ÁêÜËß£„ÇíÈÄö„Åò„Å¶ÂíåËß£„ÄÇÁï∞„Å™„ÇãÂàÜÈáé„ÅÆÊäÄË°ì„ÅåËûçÂêà„Åô„Çã„Åì„Å®„ÅßÁîü„Åæ„Çå„ÇãÊñ∞„Åü„Å™ÂèØËÉΩÊÄß„ÇíÁ§∫„Åó„Åæ„Åó„Åü„ÄÇ',
      imageRandom: 32
    },
    {
      id: 5,
      name: '„Çø„ÉÑ„Ç≥ & „Éè„ÉÅ„É≠„Ç¶',
      role: 'Á¥îÁ≤ã„Å™ÊÑõ„ÅßÁπã„Åå„Çå„Åü‰ºùË™¨„ÅÆÊÅã‰∫∫„Åü„Å°',
      emoji: 'üíô',
      bgColor: 'linear-gradient(135deg, #667eea, #96ceb4)',
      description: 'Áî∞Ê≤¢Êπñ„ÅÆ„Çø„ÉÑ„Ç≥„Å®ÂÖ´ÈÉéÊΩü„ÅÆ„Éè„ÉÅ„É≠„Ç¶„ÄÇÁ¥îÁ≤ã„Å™ÊÑõ„ÅÆÂäõ„ÅßÂõ∞Èõ£„Çí‰πó„ÇäË∂ä„Åà„ÇãÁâ©Ë™û„ÄÇ',
      detailDescription: 'Áæé„Åó„Åè„Å™„Çç„ÅÜ„Å®„Åó„Å¶Èæç„ÅÆÂßø„Å´„Å™„Å£„Å¶„Åó„Åæ„Å£„Åü„Çø„ÉÑ„Ç≥„Å®„ÄÅÂçÅÂíåÁî∞Êπñ„Åã„ÇâËøΩ„ÅÑÂá∫„Åï„Çå„Å¶ËêΩ„Å°Ëæº„ÇÄ„Éè„ÉÅ„É≠„Ç¶„ÅÆÊÅãÁâ©Ë™û„ÄÇÂçóÁ•ñÂùä„ÅÆÂ¶®ÂÆ≥Â∑•‰Ωú„Çí‰πó„ÇäË∂ä„Åà„ÄÅÁ¥îÁ≤ã„Å™ÊÑõ„ÅÆÂäõ„ÅßÁî∞Ê≤¢Êπñ„ÅÆÊ∞∑„ÇíÊ∫∂„Åã„Åó„ÄÅÂú∞Âüü„ÇíÊïë„ÅÑ„Åæ„Åó„Åü„ÄÇÂ§ñË¶ã„Åß„ÅØ„Å™„ÅèÂÜÖÈù¢„ÅÆÁæé„Åó„Åï„ÅÆÈáçË¶ÅÊÄß„ÄÅ„Åù„Åó„Å¶Âú∞ÂüüÈñì„ÅÆÂàÜÊñ≠„Çí‰πó„ÇäË∂ä„Åà„ÇãÈÄ£Â∏Ø„ÅÆ‰æ°ÂÄ§„ÇíÊèè„ÅÑ„ÅüÊÑüÂãïÁöÑ„Å™Áâ©Ë™û„Åß„Åô„ÄÇ',
      tags: ['Á¥îÊÑõ', 'Ëá™ÁÑ∂', 'Âú∞ÂüüÂçîÂäõ'],
      abilities: ['Ê∞∑„ÅÆÊìç‰Ωú', 'ÊÑõ„ÅÆÂäõ', 'Âú∞ÂüüÁµêÊùü', 'ÂøÉ„ÅÆÁæé„Åó„Åï'],
      backstory: '„ÇÆ„É£„É´Âåñ„Åó„Å¶„Åó„Åæ„Å£„ÅüËá™ÂàÜ„ÅÆÂ§ñË¶ã„Å´„Ç≥„É≥„Éó„É¨„ÉÉ„ÇØ„Çπ„ÇíÊåÅ„Å§„Çø„ÉÑ„Ç≥„Å®„ÄÅËá™‰ø°„ÇíÂ§±„Å£„Åü„Éè„ÉÅ„É≠„Ç¶„Åå„ÄÅ‰∫í„ÅÑ„ÅÆÂøÉ„ÅÆÁæé„Åó„Åï„ÇíË™ç„ÇÅÂêà„ÅÜ„Åì„Å®„ÅßÁúü„ÅÆÊÑõ„ÇíË¶ã„Å§„Åë„Åæ„Åó„Åü„ÄÇ',
      imageRandom: 33
    },
    {
      id: 6,
      name: '„Ç¢„Ç≠„Çø',
      role: 'ÊäÄË°ì„Å®‰ºùÁµ±„ÇíËûçÂêà„Åó„ÅüAIÁßãÁî∞Áä¨',
      emoji: 'ü§ñ',
      bgColor: 'linear-gradient(135deg, #45b7d1, #ffd700)',
      description: '„Çµ„Ç§„Éú„Éº„Ç∞Âåñ„Åï„Çå„ÅüÁßãÁî∞Áä¨„ÄÇÊúÄÂÖàÁ´ØÊäÄË°ì„Å®Âø†Ë™†ÂøÉ„ÇíÂÖº„Å≠ÂÇô„Åà„ÅüÁßãÁî∞„ÅÆÂÆàË≠∑ËÄÖ„ÄÇ',
      detailDescription: 'ÂÅ•Â§™„ÅÆÁà∂„Éª„Éí„É≠„Ç∑„ÅåÁßòÂØÜË£è„Å´ÈñãÁô∫„Åó„Åü„Çµ„Ç§„Éú„Éº„Ç∞AIÁßãÁî∞Áä¨„ÄÇ„Äå‰∏ÄÁôΩÊ∞¥Êàê„Äç„ÅßÂæ©Ê¥ª„Åó„ÄÅÈ´òÂ∫¶„Å™AI„Å®ÁßãÁî∞Áä¨„ÅÆÂø†Ë™†ÂøÉ„ÇíËûçÂêà„Åó„ÅüÂ≠òÂú®„Åß„Åô„ÄÇÊú®ÈÄ†„Ç´„É©„ÇØ„É™„Éñ„É™„Ç≠„É≠„Éú„ÄåÂí≤Ë™á„Äç„Å®„ÅÆÈÄ£Êê∫„ÅßÁßãÁî∞„ÇíÂÆà„Çã‰ΩøÂëΩ„ÇíÂ∏Ø„Å≥„Å¶„ÅÑ„Åæ„Åô„ÄÇÊäÄË°ì„Å®‰ºùÁµ±„ÅÆÁæé„Åó„ÅÑËûçÂêà„ÄÅ„Åù„Åó„Å¶ÂÆ∂Êóè„ÅÆÁµÜ„ÅÆÂ§ßÂàá„Åï„ÇíÁ§∫„Åô„Ç≠„É£„É©„ÇØ„Çø„Éº„Åß„Åô„ÄÇ',
      tags: ['AI', 'Âø†Ë™†ÂøÉ', 'ÊäÄË°ìËûçÂêà'],
      abilities: ['È´òÂ∫¶AI', 'Êà¶ÈóòËÉΩÂäõ', 'Âí≤Ë™áÈÄ£Êê∫', 'ÁßãÁî∞ÂÆàË≠∑'],
      backstory: 'Áà∂„Éª„Éí„É≠„Ç∑„ÅÆÁßãÁî∞„Å∏„ÅÆÊ∑±„ÅÑÊÑõ„Å®ÊúÄÂÖàÁ´ØÊäÄË°ì„Å´„Çà„Å£„Å¶Áîü„Åæ„Çå„ÅüÂ≠òÂú®„ÄÇË°®Èù¢ÁöÑ„Å´„ÅØÈÖíÈ£≤„Åø„Å®ÊÄù„Çè„Çå„Å¶„ÅÑ„ÅüÁà∂„ÅÆÁúü„ÅÆÂßø„Å®„ÄÅÂÆ∂Êóè„Å∏„ÅÆÊ∑±„ÅÑÊÑõÊÉÖ„ÇíÊòé„Åã„ÅôÈáçË¶Å„Å™Â≠òÂú®„Åß„Åô„ÄÇ',
      imageRandom: 34
    },
    {
      id: 7,
      name: '„Éà„É™„Ç™ & „Çø„É≥„Éù',
      role: 'ÂçîÂäõ„ÅßÁßãÁî∞„ÇíÁµ±‰∏Ä„Åô„Çã„Ç≥„É≥„Éì',
      emoji: 'üç≤',
      bgColor: 'linear-gradient(135deg, #ff6b6b, #ffd700)',
      description: 'ÊØîÂÜÖÂú∞È∂è„ÅÆ„Éà„É™„Ç™„Å®„Åç„Çä„Åü„Çì„ÅΩ„ÅÆ„Çø„É≥„Éù„ÄÇÂØæÁ´ã„Åã„ÇâÂçîÂäõ„Å∏„ÄÅÁßãÁî∞Áúå„ÅÆÁµ±‰∏Ä„ÇíÂÆüÁèæ„Åô„Çã„ÄÇ',
      detailDescription: 'ÊØîÂÜÖÂú∞È∂è„ÅÆÊì¨‰∫∫Âåñ„Ç≠„É£„É©„Éª„Éà„É™„Ç™Ôºà„ÇÆ„É£„É≥„Ç∞È¢®Ôºâ„Å®„Åç„Çä„Åü„Çì„ÅΩ„ÅÆÂåñË∫´„Éª„Çø„É≥„ÉùÔºà„É§„É≥„Ç≠„ÉºÈ¢®Ôºâ„ÅåÊøÄ„Åó„ÅèÂØæÁ´ã„Åó„Å¶„ÅÑ„ÅüÈπøËßíÂ∏Ç„ÄÇÂçóÁ•ñÂùä„ÅÆÂàÜË£ÇÂ∑•‰Ωú„Çí‰πó„ÇäË∂ä„Åà„ÄÅÁ©∂Ê•µ„ÅÆÊñôÁêÜÂØæÊ±∫„ÇíÈÄö„Åò„Å¶ÂçîÂäõ„ÅÆ‰æ°ÂÄ§„ÇíÁô∫Ë¶ã„ÄÇÁßãÁî∞„ÅÆÈ£üÊùê„ÅåÁµÑ„ÅøÂêà„Çè„Åï„Çã„Åì„Å®„ÅßÁîü„Åæ„Çå„ÇãÁõ∏‰πóÂäπÊûú„ÇíÂÆüÊÑü„Åó„ÄÅÁúåÂÖ®‰Ωì„ÅÆÁµ±Âêà„Å®„ÄåÁßãÁî∞„Éñ„É©„É≥„Éâ„Äç„ÅÆÂº∑Âäõ„Åï„ÇíÂÆüÁèæ„Åó„Åæ„Åó„Åü„ÄÇ',
      tags: ['Áµ±Âêà', 'ÂçîÂäõ', 'ÁßãÁî∞„Éñ„É©„É≥„Éâ'],
      abilities: ['ÊñôÁêÜ„Ç≥„É≥„Éú', 'Âú∞ÂüüÁµêÊùü', 'Áõ∏‰πóÂäπÊûú', '„Éñ„É©„É≥„ÉâÂåñ'],
      backstory: 'ÊúÄÂàù„ÅØ‰∫í„ÅÑ„ÅÆÂ≠òÂú®„ÇíÂê¶ÂÆö„ÅóÂêà„Å£„Å¶„ÅÑ„Åæ„Åó„Åü„Åå„ÄÅÂçîÂäõ„Åó„Å¶‰Ωú„Å£„Åü„Åç„Çä„Åü„Çì„ÅΩÈçã„ÅÆÁµ∂ÂìÅ„ÅÆÁæéÂë≥„Åó„Åï„Çí‰ΩìÈ®ì„Åó„ÄÅÁßãÁî∞„ÅÆÁ¥†Êô¥„Çâ„Åó„ÅÑÈ£üÊùê„ÇíÁµêÈõÜ„Åó„Å¶‰∏ñÁïå„Å´Áô∫‰ø°„Åô„Çã‰ΩøÂëΩ„ÇíÂÖ±Êúâ„Åó„Åæ„Åó„Åü„ÄÇ',
      imageRandom: 35
    }
  ];

  useEffect(() => {
    if (!isAutoPlay) return;
    
    const interval = setInterval(() => {
      setCurrentIndex((prev) => (prev + 1) % characters.length);
    }, 4000);
    
    return () => clearInterval(interval);
  }, [isAutoPlay, characters.length]);

  const nextCard = () => {
    setIsAutoPlay(false);
    setCurrentIndex((prev) => (prev + 1) % characters.length);
  };

  const prevCard = () => {
    setIsAutoPlay(false);
    setCurrentIndex((prev) => (prev - 1 + characters.length) % characters.length);
  };

  return (
    <CharacterContainer id="character-section">
      <SectionTitle
        initial={{ opacity: 0, y: 50 }}
        whileInView={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8 }}
        viewport={{ once: true }}
      >
        ÁßãÁî∞ÂêçÁâ©Kitazuna's
      </SectionTitle>

      <CardGameContainer>
        <AnimatePresence mode="wait">
          {[-1, 0, 1].map((offset) => {
            const cardIndex = (currentIndex + offset + characters.length) % characters.length;
            const character = characters[cardIndex];
            const position = offset === -1 ? 'left' : offset === 0 ? 'center' : 'right';
            
            return (
              <PokemonCard
                key={`${character.id}-${currentIndex}`}
                $position={position}
                {...CardShuffleIn}
                transition={{ duration: 0.6, ease: "easeInOut" }}
                onClick={() => position === 'center' && setSelectedCharacter(character)}
                whileHover={{ scale: position === 'center' ? 1.15 : 0.9 }}
                whileTap={{ scale: position === 'center' ? 1.05 : 0.85 }}
              >
                <CardHeader>
                  <CardTitle>{character.name}</CardTitle>
                </CardHeader>
                
                <CardImageArea $bgColor={character.bgColor}>
                  {/* <CharacterPortrait
                    src={`https://picsum.photos/300/200?random=${character.imageRandom}`}
                    alt={`KITAZUNA's ${character.name}`}
                    loading="lazy"
                  /> */}
                  <CharacterEmoji>{character.emoji}</CharacterEmoji>
                </CardImageArea>
                
                <CardInfo>
                  <CharacterRole>{character.role}</CharacterRole>
                  <CharacterDescription>{character.description}</CharacterDescription>
                  <CharacterTags>
                    {character.tags.slice(0, 3).map((tag, tagIndex) => (
                      <Tag key={tagIndex}>{tag}</Tag>
                    ))}
                  </CharacterTags>
                </CardInfo>
              </PokemonCard>
            );
          })}
        </AnimatePresence>
      </CardGameContainer>
      
      <NavigationControls>
        <NavButton 
          onClick={prevCard}
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
        >
          ‚Üê
        </NavButton>
        
        <CardIndicators>
          {characters.map((_, index) => (
            <Indicator
              key={index}
              $isActive={index === currentIndex}
              onClick={() => setCurrentIndex(index)}
              whileHover={{ scale: 1.2 }}
            />
          ))}
        </CardIndicators>
        
        <NavButton 
          onClick={nextCard}
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
        >
          ‚Üí
        </NavButton>
      </NavigationControls>

      <DesignerCredit>
        <DesignerTitle>„Ç≠„É£„É©„ÇØ„Çø„Éº„Éá„Ç∂„Ç§„É≥</DesignerTitle>
        <DesignerDescription>
          „Ç≠„É£„É©„ÇØ„Çø„Éº„Éá„Ç∂„Ç§„É≥„ÅØ„Äå„Åè„Å´„Åä„Åè„Çì„Äç„Ç∑„É™„Éº„Ç∫„ÅßÁü•„Çâ„Çå„ÇãÁ∑íÊñπÂ≠ùÊ≤ªÊ∞è„ÅåÊâã„Åå„Åë„Å¶„ÅÑ„Åæ„Åô„ÄÇ
          „É¨„Éà„É≠„Ç≤„Éº„É†„ÅÆÈ≠ÖÂäõ„Å®Áèæ‰ª£ÁöÑ„Å™„Çª„É≥„Çπ„ÇíËûçÂêà„Åó„Åü„ÄÅË¶™„Åó„Åø„ÇÑ„Åô„Åè„ÇÇÂÄãÊÄßÁöÑ„Å™„Ç≠„É£„É©„ÇØ„Çø„Éº„Åü„Å°„Åå
          „Éó„É¨„Ç§„É§„Éº„ÇíÁßãÁî∞„ÅÆ‰∏ñÁïå„Å∏„Å®Â∞é„Åç„Åæ„Åô„ÄÇ
        </DesignerDescription>
      </DesignerCredit>

      <AnimatePresence>
        {selectedCharacter && (
          <CharacterModal
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={() => setSelectedCharacter(null)}
          >
            <ModalContent
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              onClick={(e) => e.stopPropagation()}
            >
              <CloseButton onClick={() => setSelectedCharacter(null)}>‚úï</CloseButton>
              
              <ModalCharacterImage $bgColor={selectedCharacter.bgColor}>
                {selectedCharacter.emoji}
              </ModalCharacterImage>
              
              <h2 style={{ textAlign: 'center', color: '#ffd700', marginBottom: '0.5rem' }}>
                {selectedCharacter.name}
              </h2>
              <p style={{ textAlign: 'center', color: '#ff6b6b', marginBottom: '2rem' }}>
                {selectedCharacter.role}
              </p>
              
              <div style={{ marginBottom: '2rem' }}>
                <h3 style={{ color: '#4ecdc4', marginBottom: '1rem' }}>Ë©≥Á¥∞</h3>
                <p style={{ lineHeight: 1.8, color: '#e0e0e0' }}>
                  {selectedCharacter.detailDescription}
                </p>
              </div>

              {selectedCharacter.abilities && (
                <div style={{ marginBottom: '2rem' }}>
                  <h3 style={{ color: '#4ecdc4', marginBottom: '1rem' }}>ÁâπÊÆäËÉΩÂäõ</h3>
                  <ul style={{ color: '#e0e0e0', paddingLeft: '1.5rem' }}>
                    {selectedCharacter.abilities.map((ability, index) => (
                      <li key={index} style={{ marginBottom: '0.5rem' }}>{ability}</li>
                    ))}
                  </ul>
                </div>
              )}

              {selectedCharacter.backstory && (
                <div>
                  <h3 style={{ color: '#4ecdc4', marginBottom: '1rem' }}>ËÉåÊôØ„Çπ„Éà„Éº„É™„Éº</h3>
                  <p style={{ lineHeight: 1.8, color: '#e0e0e0' }}>
                    {selectedCharacter.backstory}
                  </p>
                </div>
              )}
            </ModalContent>
          </CharacterModal>
        )}
      </AnimatePresence>
    </CharacterContainer>
  );
};

export default CharacterSection;